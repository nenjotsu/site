{"version":3,"sources":["webpack:///./src/pages/prefer-webp.js","webpack:///./src/components/floating-image.js","webpack:///./src/components/page-title.js"],"names":["PreferWebp","_ref","data","location","___EmotionJSX","Layout","image","coverImage","localFile","childImageSharp","fluid","imageTitle","title","credit","PageTitle","FloatingImage","imageMobile","floatingImageMobile","fixed","imageDesktop","floatingImage","Img","fullWidthImage","Image","_styled","target","rhythm","options","blockMarginBottom","gutter","default","mq","tablet","desktop","backgroundColor","React","Fragment","media","phablet","replace","trim","_ref2","name","styles","children","css"],"mappings":"2FAAA,0FAyCeA,UAjCIC,IAAA,IAAC,KAAEC,EAAI,SAAEC,GAAUF,EAAA,OACpCG,YAACC,IAAM,CACLF,SAAUA,EACVG,MAAOJ,EAAKK,WAAWC,UAAUC,gBAAgBC,MACjDC,WAAY,IAAIT,EAAKK,WAAWK,aAAaV,EAAKK,WAAWM,6BAE7DT,YAACU,IAAS,KAAC,eACXV,YAACW,IAAa,CACZC,YAAad,EAAKe,oBAAoBT,UAAUC,gBAAgBS,MAChEC,aAAcjB,EAAKkB,cAAcZ,UAAUC,gBAAgBS,MAC3DN,MAAO,IAAIV,EAAKkB,cAAcR,aAAaV,EAAKkB,cAAcP,8BAEhET,YAAA,SAAG,2NAIIA,YAAA,cAAQ,gBAAqB,OAAK,IACvCA,YAAA,cAAQ,uBAA4B,KAEtCA,YAAA,SAAG,OACGA,YAAA,cAAQ,QAAa,4NAGKA,YAAA,YAAM,YAAe,gBAErDA,YAACiB,IAAG,CACFX,MAAOR,EAAKoB,eAAed,UAAUC,gBAAgBC,MACrDE,MAAO,IAAIV,EAAKoB,eAAeV,aAAaV,EAAKoB,eAAeT,8BAElET,YAAA,a,gIC9BJ,MAAMmB,EAAQC,YAAOH,IAAG,CAAAI,OAAA,YAAVD,CAAW,2CAGNE,YAAmC,EAA5BC,IAAQC,mBAAsB,gBACvCF,YAAmC,EAA5BC,IAAQC,mBAAsB,kBACnCC,SAAOC,QAAO,IAE7BC,KAAGC,OAAM,kBACQH,SAAOG,OAAM,KAG9BD,KAAGE,QAAO,kBACOJ,SAAOI,QAAO,MAqCpBlB,IAjCOd,IAAA,IAAC,YACrBe,EAAW,aACXG,EAAY,MACZP,EAAK,gBACLsB,GACDjC,EAAA,OACCG,YAAC+B,IAAMC,SAAQ,KAabhC,YAACmB,EAAK,CACJL,MAAO,CACLF,EACA,IACKG,EACHkB,MAAON,KAAGO,QAAQC,QAAQ,SAAU,IAAIC,SAG5CN,gBAAiBA,IAAoC,EACrDtB,MAAOA,O,4DCnDY,IAAA6B,EAAA,CAAAC,KAAA,SAAAC,OAAA,iBAIV7B,IAFGb,IAAA,IAAC,SAAE2C,GAAU3C,EAAA,OAAKG,YAAA,MAAIyC,IAAGJ,GAAqBG","file":"component---src-pages-prefer-webp-js-5e23f218b41c48ea3d84.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport FloatingImage from \"../components/floating-image\"\nimport PageTitle from \"../components/page-title\"\nimport Layout from \"../components/layout\"\n\nconst PreferWebp = ({ data, location }) => (\n  <Layout\n    location={location}\n    image={data.coverImage.localFile.childImageSharp.fluid}\n    imageTitle={`“${data.coverImage.title}” by ${data.coverImage.credit} (via unsplash.com)`}\n  >\n    <PageTitle>Prefer WebP</PageTitle>\n    <FloatingImage\n      imageMobile={data.floatingImageMobile.localFile.childImageSharp.fixed}\n      imageDesktop={data.floatingImage.localFile.childImageSharp.fixed}\n      title={`“${data.floatingImage.title}” by ${data.floatingImage.credit} (via unsplash.com)`}\n    />\n    <p>\n      WebP is a modern image format that provides both lossless and lossy\n      compression for images on the web. This format can reduce the filesize\n      considerably compared to JPG and PNG files, and using it is pretty easy\n      with <strong>gatsby-image</strong> and{` `}\n      <strong>gatsby-plugin-sharp</strong>.\n    </p>\n    <p>\n      The <strong>WebP</strong> technique is similar to other gatsby-image\n      techniques in that it can be applied in image queries with GraphQL. To\n      specify that an image should be loaded in the WebP format in supporting\n      browsers, use a fragment with <code>withWebp</code> at the end.\n    </p>\n    <Img\n      fluid={data.fullWidthImage.localFile.childImageSharp.fluid}\n      title={`“${data.fullWidthImage.title}” by ${data.fullWidthImage.credit} (via unsplash.com)`}\n    />\n    <p />\n  </Layout>\n)\n\nexport default PreferWebp\n\nexport const query = graphql`\n  query {\n    coverImage: unsplashImagesYaml(title: { eq: \"Pug with yellow raincoat\" }) {\n      credit\n      title\n      localFile {\n        childImageSharp {\n          fluid(maxWidth: 720) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    floatingImageMobile: unsplashImagesYaml(title: { eq: \"Cacti\" }) {\n      localFile {\n        childImageSharp {\n          fixed(width: 120) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n    floatingImage: unsplashImagesYaml(title: { eq: \"Cacti\" }) {\n      credit\n      title\n      localFile {\n        childImageSharp {\n          fixed(width: 200) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n    fullWidthImage: unsplashImagesYaml(title: { eq: \"Tennis court\" }) {\n      credit\n      title\n      localFile {\n        childImageSharp {\n          fluid(maxWidth: 600) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Img from \"gatsby-image\"\nimport styled from \"@emotion/styled\"\n\nimport { rhythm, options } from \"../utils/typography\"\nimport { mq, gutter } from \"../utils/presets\"\n\nconst Image = styled(Img)`\n  display: block;\n  float: right;\n  margin-bottom: ${rhythm(options.blockMarginBottom * 2)};\n  margin-left: ${rhythm(options.blockMarginBottom * 2)};\n  margin-right: -${gutter.default};\n\n  ${mq.tablet} {\n    margin-right: -${gutter.tablet};\n  }\n\n  ${mq.desktop} {\n    margin-right: -${gutter.desktop};\n  }\n`\n\nconst FloatingImage = ({\n  imageMobile,\n  imageDesktop,\n  title,\n  backgroundColor,\n}) => (\n  <React.Fragment>\n    {/*\n        gatsby-image sets a couple of inline styles on its outer\n        container and allows overriding via its `style` prop. One\n        of these inline styles is `display: inline-block´.\n\n        In this case we have two images, one for mobile and one\n        for desktop, and toggle their visibility with `display`,\n        so we need to override the gatsby-image default to make\n        our own styles work.\n\n        https://www.gatsbyjs.org/packages/gatsby-image/#gatsby-image-props\n    */}\n    <Image\n      fixed={[\n        imageMobile,\n        {\n          ...imageDesktop,\n          media: mq.phablet.replace(`@media`, ``).trim(),\n        },\n      ]}\n      backgroundColor={backgroundColor ? backgroundColor : false}\n      title={title}\n    />\n  </React.Fragment>\n)\n\nexport default FloatingImage\n","import React from \"react\"\n\nconst PageTitle = ({ children }) => <h2 css={{ marginTop: 0 }}>{children}</h2>\n\nexport default PageTitle\n"],"sourceRoot":""}